
'Element handle module.'
import logging
import os.path
from typing import Any, Dict, List, Optional, TYPE_CHECKING
from pyppeteer.connection import CDPSession
from pyppeteer.execution_context import ExecutionContext, JSHandle
from pyppeteer.errors import ElementHandleError, NetworkError
from pyppeteer.util import merge_dict
if TYPE_CHECKING:
    from pyppeteer.frame_manager import Frame
logger = logging.getLogger(__name__)


class ElementHandle(JSHandle):
    'ElementHandle class.\n\n    This class represents an in-page DOM element. ElementHandle can be created\n    by the :meth:`pyppeteer.page.Page.querySelector` method.\n\n    ElementHandle prevents DOM element from garbage collection unless the\n    handle is disposed. ElementHandles are automatically disposed when their\n    origin frame gets navigated.\n\n    ElementHandle isinstance can be used as arguments in\n    :meth:`pyppeteer.page.Page.querySelectorEval` and\n    :meth:`pyppeteer.page.Page.evaluate` methods.\n    '

    def __init__(self, context: ExecutionContext, client: CDPSession, remoteObject: dict, page: Any) -> None:
        super().__init__(context, client, remoteObject)
        self._client = client
        self._remoteObject = remoteObject
        self._page = page
        self._disposed = False

    def asElement(self) -> 'ElementHandle':
        'Return this ElementHandle.'
        return self

    async def _scrollIntoViewIfNeeded(self) -> None:
        error = (await self.executionContext.evaluate("element => {\n                if (!element.isConnected)\n                    return 'Node is detached from document';\n                if (element.nodeType !== Node.ELEMENT_NODE)\n                    return 'Node is not of type HTMLElement';\n                element.scrollIntoViewIfNeeded();\n                return false;\n            }", self))
        if error:
            raise ElementHandleError(error)

    async def _visibleCenter(self) -> Dict[(str, float)]:
        (await self._scrollIntoViewIfNeeded())
        box = (await self.boundingBox())
        if (not box):
            raise ElementHandleError('Node is not visible.')
        return {
            'x': (box['x'] + (box['width'] / 2)),
            'y': (box['y'] + (box['height'] / 2)),
        }

    async def hover(self) -> None:
        'Move mouse over to center of this element.\n\n        If needed, this method scrolls eleemnt into view. If this element is\n        detached from DOM tree, the method raises an ``ElementHandleError``.\n        '
        obj = (await self._visibleCenter())
        x = obj.get('x', 0)
        y = obj.get('y', 0)
        (await self._page.mouse.move(x, y))

    async def click(self, options: dict=None, **kwargs: Any) -> None:
        'Click the center of this element.\n\n        If needed, this method scrolls element into view. If the element is\n        detached from DOM, the method raises ``ElementHandleError``.\n\n        ``options`` can contain the following fields:\n\n        * ``button`` (str): ``left``, ``right``, of ``middle``, defaults to\n          ``left``.\n        * ``clickCount`` (int): Defaults to 1.\n        * ``delay`` (int|float): Time to wait between ``mousedown`` and\n          ``mouseup`` in milliseconds. Defaults to 0.\n        '
        options = merge_dict(options, kwargs)
        obj = (await self._visibleCenter())
        x = obj.get('x', 0)
        y = obj.get('y', 0)
        (await self._page.mouse.click(x, y, options))

    async def uploadFile(self, *filePaths: str) -> dict:
        'Upload files.'
        files = [os.path.abspath(p) for p in filePaths]
        objectId = self._remoteObject.get('objectId')
        return (await self._client.send('DOM.setFileInputFiles', {
            'objectId': objectId,
            'files': files,
        }))

    async def tap(self) -> None:
        'Tap the center of this element.\n\n        If needed, this method scrolls element into view. If the element is\n        detached from DOM, the method raises ``ElementHandleError``.\n        '
        center = (await self._visibleCenter())
        x = center.get('x', 0)
        y = center.get('y', 0)
        (await self._page.touchscreen.tap(x, y))

    async def focus(self) -> None:
        'Focus on this element.'
        (await self.executionContext.evaluate('element => element.focus()', self))

    async def type(self, text: str, options: Dict=None, **kwargs: Any) -> None:
        'Focus the element and then type text.\n\n        Details see :meth:`pyppeteer.input.Keyboard.type` method.\n        '
        options = merge_dict(options, kwargs)
        (await self.focus())
        (await self._page.keyboard.type(text, options))

    async def press(self, key: str, options: Dict=None, **kwargs: Any) -> None:
        'Press ``key`` onto the element.\n\n        This method focuses the element, and then uses\n        :meth:`pyppeteer.input.keyboard.down` and\n        :meth:`pyppeteer.input.keyboard.up`.\n\n        :arg str key: Name of key to press, such as ``ArrowLeft``.\n\n        This method accepts the following options:\n\n        * ``text`` (str): If specified, generates an input event with this\n          text.\n        * ``delay`` (int|float): Time to wait between ``keydown`` and\n          ``keyup``. Defaults to 0.\n        '
        options = merge_dict(options, kwargs)
        (await self.focus())
        (await self._page.keyboard.press(key, options))

    async def boundingBox(self) -> Optional[Dict[(str, float)]]:
        'Return bounding box of this element.\n\n        If the element is not visible, return ``None``.\n\n        This method returns dictionary of bounding box, which contains:\n\n        * ``x`` (int): The X coordinate of the element in pixels.\n        * ``y`` (int): The Y coordinate of the element in pixels.\n        * ``width`` (int): The width of the element in pixels.\n        * ``height`` (int): The height of the element in pixels.\n        '
        try:
            result = (await self._client.send('DOM.getBoxModel', {
                'objectId': self._remoteObject.get('objectId'),
            }))
        except NetworkError:
            result = None
        if (not result):
            return None
        quad = result['model']['border']
        x = min(quad[0], quad[2], quad[4], quad[6])
        y = min(quad[1], quad[3], quad[5], quad[7])
        width = (max(quad[0], quad[2], quad[4], quad[6]) - x)
        height = (max(quad[1], quad[3], quad[5], quad[7]) - y)
        return {
            'x': x,
            'y': y,
            'width': width,
            'height': height,
        }

    async def screenshot(self, options: Dict=None, **kwargs: Any) -> bytes:
        'Take a screenshot of this element.\n\n        If the element is detached from DOM, this method raises an\n        ``ElementHandleError``.\n\n        Available options are same as :meth:`pyppeteer.page.Page.screenshot`.\n        '
        options = merge_dict(options, kwargs)
        (await self._scrollIntoViewIfNeeded())
        _obj = (await self._client.send('Page.getLayoutMetrics'))
        pageX = _obj['layoutViewport']['pageX']
        pageY = _obj['layoutViewport']['pageY']
        clip = (await self.boundingBox())
        if (not clip):
            raise ElementHandleError('Node is not visible.')
        clip['x'] = (clip['x'] + pageX)
        clip['y'] = (clip['y'] + pageY)
        opt = {
            'clip': clip,
        }
        opt.update(options)
        return (await self._page.screenshot(opt))

    async def querySelector(self, selector: str) -> Optional['ElementHandle']:
        'Return first element which matches ``selector`` under this element.\n\n        If no element mathes the ``selector``, returns ``None``.\n        '
        handle = (await self.executionContext.evaluateHandle('(element, selector) => element.querySelector(selector)', self, selector))
        element = handle.asElement()
        if element:
            return element
        (await handle.dispose())
        return None

    async def querySelectorAll(self, selector: str) -> List['ElementHandle']:
        'Return all elements which match ``selector`` under this element.\n\n        If no element matches the ``selector``, returns empty list (``[]``).\n        '
        arrayHandle = (await self.executionContext.evaluateHandle('(element, selector) => element.querySelectorAll(selector)', self, selector))
        properties = (await arrayHandle.getProperties())
        (await arrayHandle.dispose())
        result = []
        for prop in properties.values():
            elementHandle = prop.asElement()
            if elementHandle:
                result.append(elementHandle)
        return result
    J = querySelector
    JJ = querySelectorAll

    async def xpath(self, expression: str) -> List['ElementHandle']:
        'Evaluate XPath expression relative to this elementHandle.\n\n        If there is no such element, return None.\n\n        :arg str expression: XPath string to be evaluated.\n        '
        arrayHandle = (await self.executionContext.evaluateHandle('(element, expression) => {\n                const document = element.ownerDocument || element;\n                const iterator = document.evaluate(expression, element, null,\n                    XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n                const array = [];\n                let item;\n                while ((item = iterator.iterateNext()))\n                    array.push(item);\n                return array;\n\n            }', self, expression))
        properties = (await arrayHandle.getProperties())
        (await arrayHandle.dispose())
        result = []
        for property in properties.values():
            elementHandle = property.asElement()
            if elementHandle:
                result.append(elementHandle)
        return result
    Jx = xpath
